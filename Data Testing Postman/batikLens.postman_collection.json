{
	"info": {
		"_postman_id": "3994818b-a6a8-4896-8921-9f0d65a4baed",
		"name": "batikLens",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32712051"
	},
	"item": [
		{
			"name": "Register",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\",\n  \"confirmPassword\": \"password123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should have a success message\", function () {",
							"  var jsonData = pm.response.json();",
							"  pm.expect(jsonData.status).to.eql(\"success\");",
							"  pm.expect(jsonData.message).to.eql(\"Login successful\");",
							"});",
							"",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"  pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response should have a fail message\", function () {",
							"  var jsonData = pm.response.json();",
							"  pm.expect(jsonData.status).to.eql(\"fail\");",
							"  pm.expect(jsonData.message).to.eql(\"Password is incorrect\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "ebfdf72b539df5324a49cb87acd288379947f9a321ebbaad4e3fa598534a5b9848def27dc1448b3fcde9ee728653cf54836d1542a090c8baebadb95decd9fc1d",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Prediction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test('response body should be an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"",
							"    pm.expect(responseJson).to.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals('Model is predicted successfully');",
							"    ",
							"    pm.expect(responseJson).to.ownProperty('data');",
							"    pm.expect(responseJson.data).to.be.an('object');",
							"})",
							"",
							"pm.test('response body data should have id property and not equal to empty', () => {",
							"    const responseJson = pm.response.json();",
							"    const {data} = responseJson;",
							"",
							"    pm.expect(data).to.ownProperty('id');",
							"    pm.expect(data.noteId).to.not.equals('');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiYjkzODk0ZTctZTQ4Ni00MzI5LWEzMjQtOGM0M2ZjYzFlNzJhIiwiZW1haWwiOiJ0ZXN0QGV4YW1wbGUuY29tIn0sImlhdCI6MTcxNzI1MzY0OSwiZXhwIjoxNzE3MjU3MjQ5fQ.M24hCGX-5krhAwhuKstDXYw4C3phecPC7yZR3zZonKw",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/predict",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"predict"
					]
				}
			},
			"response": []
		},
		{
			"name": "set-cookie",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiOTkyN2JjMWQtOThiOC00OTcxLWJkMzYtZThhZDg1Yjc0YTdkIiwiZW1haWwiOiJ0ZXN0QGV4YW1wbGUuY29tIn0sImlhdCI6MTcxNjgxMTQ2MSwiZXhwIjoxNzE2ODI1ODYxfQ.6tW4KPClzN7clGOmOkyI_wf1pL0BBX_WDTEjT7zvHAI",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/set-cookie",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"set-cookie"
					]
				}
			},
			"response": []
		},
		{
			"name": "protected",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNmY0ODYzZDAtMzQyYS00OGMzLWEwMDUtMTU1OGJmYTQ1NDBlIiwiZW1haWwiOiJ5dXNyaWxAZXhhbXBsZS5jb20ifSwiaWF0IjoxNzE2ODM0MzAxLCJleHAiOjE3MTY4Mzc5MDF9.LGepVG9sj3ktn6h0Hh5g3kllFDeC8zzu9g95_myCX58",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/protected",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"protected"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Opsional] getHistories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('response body should be an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"    ",
							"    pm.expect(responseJson).to.ownProperty('data');",
							"    pm.expect(responseJson.data).to.be.an('array');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://localhost:3000/predict/histories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"predict",
						"histories"
					]
				}
			},
			"response": []
		}
	]
}